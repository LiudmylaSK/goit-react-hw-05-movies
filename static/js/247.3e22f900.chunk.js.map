{"version":3,"file":"static/js/247.3e22f900.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","movies-api/Api.jsx","movies-api/constant-images.js"],"sourcesContent":["\n\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCast } from \"movies-api/Api\";\nimport { BASE_POSTER_URL } from \"movies-api/constant-images\";\nimport { PLACEHOLDER } from \"movies-api/constant-images\";\nimport styled from \"styled-components\"; \n\n\n\n\n const Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const cast = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n   return (\n  <>\n      { <WrapperStyled>\n            {cast.map(({ id, profile_path, original_name, character }) => (\n              <ActorCard key={id}>\n                <img\n                  src={`${\n                    profile_path\n                      ? BASE_POSTER_URL + profile_path\n                      : `${PLACEHOLDER}`\n                  }`}\n                  alt={original_name}\n                  width=\"100\"\n                />\n                <h4>\n                  {original_name}\n                </h4>\n                <p>\n                 {character}\n                </p>\n              </ActorCard>\n            ))}\n          </WrapperStyled>\n   }\n   </>\n  );\n};\n\nexport default Cast;\n\n\nconst WrapperStyled = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nconst ActorCard = styled.li`\n  text-align: center;\n  width: 25%; \n`;","import axios from \"axios\";\n\nconst API_KEY = '9e79bf179828bbd88a056650275888ae';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\n// Get the trending movies\nconst fetchTrendingMovies = async () => {\n  const response = await axiosInstance.get(`trending/movie/day`);\n  return response.data.results;\n};\n\n// Get full movie information\nconst fetchMovieDetails = async movieId => {\n  const response = await axiosInstance.get(`/movie/${movieId}`);\n  return response.data;\n};\n\n// Search for movies by their original, translated and alternative titles\nconst fetchSearch = async movieName => {\n  const response = await axiosInstance.get(`/search/movie?query=${movieName}`);\n  return response.data.results;\n};\n\n// Get the cast information\nconst fetchMovieCast = async movieId => {\n  const response = await axiosInstance.get(`movie/${movieId}/credits`);\n  return response.data.cast;\n};\n\n// Get the user reviews for a movie\nconst fetchMovieReviews = async movieId => {\n  const response = await axiosInstance.get(`movie/${movieId}/reviews`);\n  return response.data.results;\n};\n\nexport {\n  fetchTrendingMovies,\n  fetchMovieDetails,\n  fetchSearch,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n    \n","export const BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const PLACEHOLDER =\n  'https://via.placeholder.com/100x150?text=no+images+available';\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","fetchCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_cast","_context","prev","next","fetchMovieCast","sent","t0","console","log","stop","apply","arguments","_jsx","_Fragment","children","WrapperStyled","map","_ref2","id","profile_path","original_name","character","_jsxs","ActorCard","src","concat","BASE_POSTER_URL","PLACEHOLDER","alt","width","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","axiosInstance","axios","baseURL","params","api_key","language","include_adult","fetchTrendingMovies","response","get","abrupt","data","results","fetchMovieDetails","_callee2","_context2","_x","fetchSearch","_ref3","_callee3","movieName","_context3","_x2","_ref4","_callee4","_context4","_x3","fetchMovieReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}